package com.cbr.bankseekswing;

import com.cbr.bankseekswing.pojo.BnkSeek;
import com.cbr.bankseekswing.pojo.ReferenceItem;
import com.cbr.bankseekswing.utils.BnkDbUtils;
import com.cbr.bankseekswing.utils.EntityDescriptions;
import com.toedter.calendar.JDateChooser;
import java.awt.Component;
import java.awt.Container;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.text.JTextComponent;
import org.apache.commons.lang3.reflect.FieldUtils;

/**
 * Created by e.vassaev on 11/13/17.
 */
public class BnkSeekEditForm extends javax.swing.JDialog {

    private static final long serialVersionUID = -7935936644869659541L;

    public static final int RET_OK = 1000;
    public static final int RET_CANCEL = 1001;

    private int returnStatus = RET_CANCEL;
    private BnkSeek bnkSeek = null;

    /**
     * Creates new form BnkSeekEditForm
     *
     * @param parent
     * @param modal
     */
    public BnkSeekEditForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        //!!!
        controlsPanel.setLayout(new java.awt.GridLayout(EntityDescriptions.BNKSEEK.getFieldsDescriptions().size() + 1, 4, 10, 10));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        controlsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        cancelButton.setText("Закрыть");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        okButton.setText("Сохранить");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(125, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setLayout(new java.awt.BorderLayout());

        controlsPanel.setLayout(new java.awt.GridLayout(20, 2, 10, 10));
        jPanel2.add(controlsPanel, java.awt.BorderLayout.CENTER);

        jLabel1.setText("     ");
        jPanel2.add(jLabel1, java.awt.BorderLayout.WEST);

        jLabel2.setText("     ");
        jPanel2.add(jLabel2, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed

        save(getAllComponents(this));

        doClose(RET_OK);

    }//GEN-LAST:event_okButtonActionPerformed

    protected void save(List<Component> comps) {
        comps.stream().forEach((comp) -> {
            String name = comp.getName();
            if (name != null && !name.isEmpty()) {
                try {
                    saveSimpleControl(comp);
                } catch (Exception ex) {
                    //запротоколировать?
                }
            }
        });
    }

    private void saveSimpleControl(Component comp) throws IllegalAccessException {
        String name = comp.getName();
        if (comp instanceof JDateChooser) {
            JDateChooser but = ((JDateChooser) comp);
            java.util.Date value = but.getDate();
            java.sql.Date entityValue = new java.sql.Date(value.getTime());
            FieldUtils.writeField(bnkSeek, name, entityValue, true);
        } else if (comp instanceof JTextField) {
            JTextComponent text = ((JTextComponent) comp);
            String value = text.getText().trim();
            FieldUtils.writeField(bnkSeek, name, value, true);
        }
    }

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose(); //?
    }

    public int getReturnStatus() {
        return returnStatus;
    }

    public void setObj(BnkSeek obj) {

        this.bnkSeek = obj;
        showControls();
        proccess();

    }

    private void showControls() {
        controlsPanel.removeAll();
        controlsPanel.revalidate();
        Map<String, EntityDescriptions.FieldDescription> fieldsDescriptions = EntityDescriptions.BNKSEEK.getFieldsDescriptions();

        for (String fieldName : fieldsDescriptions.keySet()) {
            EntityDescriptions.FieldDescription fieldDescription = fieldsDescriptions.get(fieldName);
            JLabel label = new JLabel(fieldDescription.getDescription());
            JComponent control;
            switch (fieldDescription.getType().getTypeName()) {
                case "java.sql.Date":
                    control = new com.toedter.calendar.JDateChooser();
                    break;
                case "java.lang.String":
                    if (fieldDescription.getReference() != null) {
                        Class<? extends ReferenceItem> cls = fieldDescription.getReference();
                        try {
                            List<ReferenceItem> list = BnkDbUtils.loadAllReferenceItem(cls);
                            ComboBoxModel<? extends ReferenceItem> aModel = new DefaultComboBoxModel(list.toArray());
                            control = new JComboBox(aModel);
                        } catch (IOException | ClassNotFoundException | IllegalAccessException | InstantiationException | SQLException ex) {
                            control = new JTextField();
                        }
                    } else {
                        control = new JTextField();
                    }
                    break;
                default:
                    control = new JTextField();
            }
            control.setName(fieldName);

            controlsPanel.add(label);
            controlsPanel.add(control);
        }

    }

    public void setNew(boolean b) {
        if (b) {
            setTitle("BNKSEEK ( новый )");
        } else {
            setTitle("BNKSEEK ( редактирование )");
        }
    }

    private void proccess() {
        List<Component> comps = getAllComponents(this);
        comps.stream().forEach((comp) -> {
            String name = comp.getName();
            if (name != null && !name.isEmpty()) {
                proccessSimpleControl(comp);
            }
        });
    }

    protected java.util.List<Component> getAllComponents(Container c) {
        Component[] comps = c.getComponents();
        java.util.List<Component> compList;
        compList = new ArrayList<>(0);
        for (Component comp : comps) {
            compList.add(comp);
            if (comp instanceof Container) {
                compList.addAll(getAllComponents((Container) comp));
            }
        }
        return compList;
    }

    private void proccessSimpleControl(Component comp) {
        String name = comp.getName();
        Object val = getField(name);
        if (val == null) {
            return;
        }
        if (comp instanceof JDateChooser) {
            java.sql.Date value = (java.sql.Date) val;

            ((JDateChooser) comp).setDate(new java.util.Date(value.getTime()));

        } else if (comp instanceof JTextField) {
            ((JTextComponent) comp).setText(val + "");
        } else if (comp instanceof JComboBox) {
            JComboBox box = (JComboBox) comp;
            ComboBoxModel<ReferenceItem> model = box.getModel();
            for (int i = 0; i < model.getSize(); i++) {
                if (model.getElementAt(i).getCode().equals(val)) {
                    box.setSelectedIndex(i);
                    break;
                }
            }
        }
    }

    protected Object getField(String fieldName) {
        try {
            Object value = FieldUtils.readField(bnkSeek, fieldName, true);
            return value;
        } catch (IllegalAccessException | IllegalArgumentException ex) {
        }
        return null;
    }

    protected BnkSeek getObj() {
        return bnkSeek;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel controlsPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables

}
